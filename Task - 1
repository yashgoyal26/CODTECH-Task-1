/* */
module and_gate_tb;
  reg a,b;
  wire y;

and_gate_s uut(a,b,y);
  
  initial begin 
    $dumpfile("and_gate_tb.vcd");
    $dumpvars();
  end

  initial begin
    a = 0; b = 0;
    #10
    a = 0; b = 1;
    #10
    a = 1; b = 0;
    #10
    a = 1; b = 1;
    #10
    $finish();
  end  
                
endmodule

// or gate tb
module or_gate_tb;
reg a,b;
wire y;

or_gate_s uut(a,b,y);

initial begin
  $dumpfile("test.vcd");
  $dumpvars();
end
initial begin
a = 0; b = 0;
#10
b = 0; b = 1;
#10
a = 1; b = 0;
#10
b = 1; b = 1;
#10
$finish();
end
                
endmodule

// not gate tb
module not_gate_tb;
  reg a;
  wire y;

  not_gate_s uut(a,y);

  initial begin
    $dumpfile("test.vcd");
    $dumpvars();
  end
  initial begin
    a = 0;
    #10
    a = 1;
    #10
    a = 0;
    #10
    a = 1;
    #10
    $finish();
  end
                
endmodule

// nand gate tb
module nand_gate_tb;
reg a,b;
wire y;

nand_gate_s uut(a,b,y);

initial begin
    $dumpfile("test.vcd");
    $dumpvars(1);
end
initial begin
a = 0; b = 0;
#10
b = 0; b = 1;
#10
a = 1; b = 0;
#10
b = 1; b = 1;
#10
$finish();
end
                
endmodule

// nor gate tb
module nor_gate_tb;
reg a,b;
wire y;

nor_gate_s uut(a,b,y);

initial begin
   $dumpfile("test.vcd");
   $dumpvars(1);
end
initial begin
a = 0; b = 0;
#10
b = 0; b = 1;
#10
a = 1; b = 0;
#10
b = 1; b = 1;
#10
$finish();
end
                
endmodule

// xor gate tb
module xor_gate_tb;
reg a,b;
wire y;

xor_gate_s uut(a,b,y);

initial begin
   $dumpfile("test.vcd");
   $dumpvars(1);
end
initial begin
a = 0; b = 0;
#10
b = 0; b = 1;
#10
a = 1; b = 0;
#10
b = 1; b = 1;
#10
$finish();
end
                
endmodule

// xnor gate tb
module xnor_gate_tb;
reg a,b;
wire y;

xnor_gate_s uut(a,b,y);

initial begin
  $dumpfile("test.vcd");
  $dumpvars(1);
end
initial begin
a = 0; b = 0;
#10
b = 0; b = 1;
#10
a = 1; b = 0;
#10
b = 1; b = 1;
#10
$finish();
end
                
endmodule

// half adder tb
module half_tb_top;
  reg a, b;
  wire s, c_out;
  
  half_adder ha(a, b, s, c_out);
  
  initial begin
    $dumpfile("half_tb.vcd");
    $dumpvars(1);
  end
  
  initial begin
    $monitor("At time %0t: a=%b b=%b, sum=%b, carry=%b",$time, a,b,s,c_out);
    a = 0; b = 0;
    #1;
    a = 0; b = 1;
    #1;
    a = 1; b = 0;
    #1;
    a = 1; b = 1;
  end
endmodule

// full adder tb
module full_tb_top;
  reg a, b, c;
  wire s, c_out;
  
  full_adder fa(a, b, c, s, c_out);
  
  initial begin
    $dumpfile("full_tb.vcd");
    $dumpvars();
  end
  initial begin
    $monitor("At time %0t: a=%b b=%b, cin=%b, sum=%b, carry=%b",$time, a,b,c,s,c_out);
    a = 0; b = 0; c = 0; #1;
    a = 0; b = 0; c = 1; #1;
    a = 0; b = 1; c = 0; #1;
    a = 0; b = 1; c = 1; #1;
    a = 1; b = 0; c = 0; #1;
    a = 1; b = 0; c = 1; #1;
    a = 1; b = 1; c = 0; #1;
    a = 1; b = 1; c = 1;
  end
endmodule


// 2:1 mux tb
module mux_2_tb;
  reg i0, i1, sel;
  wire y;
  
  mux_2_1 mux(sel, i0, i1, y);
  initial begin
    $dumpfile("test.vcd");
    $dumpvars();
  end
  initial begin
    $monitor("sel = %h: i0 = %h, i1 = %h, y = %h", sel, i0, i1, y);
    sel = 0; i0 = 1; i1 = 0;
   #10
   i0 = 0; i1 = 1;
   #10
   sel = 1; i0 = 1; i1 = 0;
   #10
   i0 = 0; i1 = 1;
   #10
    $finish();
  end
endmodule

// 3:1 mux tb
module mux_3_tb;
  reg sel0, sel1;
  reg i0,i1,i2,i3;
  wire y;
  
  mux_3_1 mux(sel0, sel1, i0, i1, i2, i3, y);
  
  initial begin
    $dumpfile("test.vcd");
    $dumpvars();
  end
  initial begin
    $monitor("sel0=%b, sel1=%b -> i3 = %0b, i2 = %0b ,i1 = %0b, i0 = %0b -> y = %0b", sel0,sel1,i3,i2,i1,i0, y);
    {i3,i2,i1,i0} = 4'h5;

    repeat(8) begin
      {sel0, sel1} = $random;
      #5;
    end
  end
endmodule

// 4:1 mux tb
module mux_4_tb;
  reg [1:0] sel;
  reg i0,i1,i2,i3;
  wire y;
  
  mux_example mux(sel, i0, i1, i2, i3, y);
  
  initial begin
    $dumpfile("test.vcd");
    $dumpvars(1);
  end
  initial begin
    $monitor("sel = %b -> i3 = %0b, i2 = %0b ,i1 = %0b, i0 = %0b -> y = %0b", sel,i3,i2,i1,i0, y);
    {i3,i2,i1,i0} = 4'h5;
    repeat(6) begin
      sel = $random;
      #5;
    end
  end
endmodule
// Code your design here
//AND gate using Structural modeling
module and_gate_s(a,b,y);
input a,b;
output y;

and(y,a,b);
                
endmodule

//OR gate using Structural modeling
module or_gate_s(a,b,y);
input a,b;
output y;

or(y,a,b);
                
endmodule

//NOT gate using Structural modeling
module not_gate_s(a,y);
input a;
output y;

not(y,a);
                
endmodule  

//NAND gate using Structural modeling
module nand_gate_s(a,b,y);
input a,b;
output y;

nand(y,a,b);
                
endmodule

//NOR gate using Structural modeling
module nor_gate_s(a,b,y);
input a,b;
output y;

nor(y,a,b);
                
endmodule

//EX-OR gate using Structural modeling
module xor_gate_s(a,b,y);
input a,b;
output y;

xor(y,a,b);
                
endmodule

//EX-NOR gate using Structural modeling
module xnor_gate_s(a,b,y);
input a,b;
output y;

xnor(y,a,b);
                
endmodule

//Half Adder using Data Flow modeling
module half_adder(input a, b, output s, Cout);
  assign s = a ^ b;
  assign Cout = a & b;
endmodule

//Full Adder using Data Flow modelingr
module full_adder(input a, b, cin, output S, Cout);
  assign S = a ^ b ^ cin;
  assign Cout = (a & b) | (b & cin) | (a & cin);
endmodule

//2:1 MUX using Data Flow modeling
module mux_2_1(
  input sel,
  input i0, i1,
  output y);
 assign y = sel ? i1 : i0;
endmodule

//3:1 MUX 
module mux_3_1(
  input sel0, sel1,
  input  i0,i1,i2,i3,
  output reg y);
  
  wire y0, y1;
  
  mux_2_1 m1(sel1, i0, i1, y0);
  mux_2_1 m2(sel0, y0, i2, y);
endmodule

//4:1 MUX 
module mux_example(
  input [1:0] sel,
  input  i0,i1,i2,i3,
  output reg y);
    
  always @(*) begin
    case(sel)
      2'h0: y = i0;
      2'h1: y = i1;
      2'h2: y = i2;
      2'h3: y = i3;
      default: $display("Invalid sel input");
    endcase
  end
endmodule
